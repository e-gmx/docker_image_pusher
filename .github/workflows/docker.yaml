name: Mirror Multi-arch Images to Aliyun ACR

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  mirror:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Aliyun ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ALIYUN_REGISTRY }}
          username: ${{ env.ALIYUN_REGISTRY_USER }}
          password: ${{ env.ALIYUN_REGISTRY_PASSWORD }}

      # images.txt 每行一个源镜像，可写完整或简写（简写默认 docker.io/library/）
      # 例如：
      # docker.io/library/mysql:latest
      # nginx:1.25.3
      # bitnami/mysql:8.0
      - name: Mirror multi-arch manifests to ACR
        shell: bash
        run: |
          set -euo pipefail

          if [[ ! -f images.txt ]]; then
            echo "images.txt not found at repo root."
            exit 1
          fi

          while IFS= read -r SRC || [[ -n "$SRC" ]]; do
            # 跳过空行/注释
            [[ -z "${SRC// }" ]] && continue
            [[ "$SRC" =~ ^[[:space:]]*# ]] && continue

            # 规范化源：无斜杠时，默认 docker.io/library/<name:tag>
            if [[ "$SRC" != */* ]]; then
              SRC_FULL="docker.io/library/$SRC"
            else
              SRC_FULL="$SRC"
            fi

            # 取最后一段作为 <repo>:<tag>
            NAME_TAG="${SRC_FULL##*/}"      # e.g. mysql:latest
            REPO="${NAME_TAG%%:*}"          # e.g. mysql
            TAG="${NAME_TAG#*:}"            # e.g. latest

            # 目标：<REGISTRY>/<NAMESPACE>/<repo>:<tag>
            DEST="${ALIYUN_REGISTRY}/${ALIYUN_NAME_SPACE}/${REPO}:${TAG}"

            echo "============================================================"
            echo "Mirroring: ${SRC_FULL}  -->  ${DEST}"
            echo "============================================================"

            # 核心：将上游 multi-arch manifest 直接创建到 ACR 目标 tag
            docker buildx imagetools create \
              --tag "${DEST}" \
              "${SRC_FULL}"

            echo "Verify platforms for ${DEST}:"
            docker buildx imagetools inspect "${DEST}" || true
          done < images.txt
